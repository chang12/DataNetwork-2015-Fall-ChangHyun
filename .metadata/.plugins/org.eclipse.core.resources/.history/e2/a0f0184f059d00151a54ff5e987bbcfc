import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.Random;

public class PingServer {

	public static void main(String[] args) throws Exception {
		// Get command line argument
		if (args.length != 1) {
			System.out.println("Requried arguments: port");
			return;
		}
		int port = Integer.parseInt(args[0]);

		// Create random number generator for use in simulating
		// packet loss and network delay
		Random random = new Random();

		// Create a datagram socket for receiving and sending UDP packets
		// through the port specified on the command line.
		DatagramSocket socket = new DatagramSocket(port);
		
		int i =0;
		// Processing loop
		while (true) {
			i++;
			// Create a datagram packet to hold incomming UDP packet.
			// Constructs a DatagramPacket for receiving.
			// arg0 = byte[] buf / arg1 = length of packet
			DatagramPacket request = new DatagramPacket(new byte[1024], 1024);

			// Block until the host receives a UDP packet
			socket.receive(request);
			System.out.println("check "+i);
			
			SendThread myThread = new SendThread(port+i);
			myThread.start(request);

		}
	}
}

class SendThread extends Thread {

	// private static final double LOSS_RATE = 0.8;
	private static final double LOSS_RATE = 0.0;
	// private static final int AVERAGE_DELAY = 100; // milliseconds
	private static final int AVERAGE_DELAY = 10000; // milliseconds
	
	private static DatagramSocket socket; 
	
	public SendThread(int port) throws SocketException
	{
		this.socket = new DatagramSocket(port);
	}
	public void run(DatagramPacket request) throws Exception {
		
		System.out.println("run");
		Random random = new Random();
		
		// Print the recevied data.
		printData(request);

		// Delete whether to reply, or simulate packet loss.
		if (random.nextDouble() < LOSS_RATE) {
			System.out.println("Reply not sent.");
		}
		else
		{
			// Simulate network delay.
			// Thread.sleep((int)(random.nextDouble()*2*AVERAGE_DELAY));
			Thread.sleep(AVERAGE_DELAY);

			// Send reply.
			InetAddress clientHost = request.getAddress();
			int clientPort = request.getPort();
			byte[] buf = request.getData();
			DatagramPacket reply = new DatagramPacket(buf, buf.length, clientHost,
					clientPort);

			socket.send(reply);

			System.out.println("Reply sent.");
		}
	}

	private static void printData(DatagramPacket request) throws Exception {
		// Obtain references to the packet's array of bytes.
		byte[] buf = request.getData();

		// Wrap the bytes in a byte array input stream,
		// so that you can read the data as a stream of bytes.
		ByteArrayInputStream bais = new ByteArrayInputStream(buf);

		// Wrap the byte array output stream in an input stream reader,
		// so you can read the data as a stream of characters
		InputStreamReader isr = new InputStreamReader(bais);

		// Wrap the input stream reader in a buffered reader,
		// so you can read the character data a line at a time,
		// (A line is a sequence of chars terminated by any combination of \r
		// and \n.)
		BufferedReader br = new BufferedReader(isr);

		// The message data is contained in a single line, so read this line.
		String line = br.readLine();

		// Print host address and data received from it.
		System.out.println("Received from "
				+ request.getAddress().getHostAddress() + ": "
				+ new String(line));
		// line);
	}
}
